{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to project Azurite\n\n\nHere you can find information about the Azurite project!\n\n\nCheck out the GitHub repository \nGitHub\n.\n\n\nWhat is Azurite?\n\n\nBasically it it a personal assistant, which can help you perform different tasks and help you keep organized.\n\n\nIt can perform tasks like:\n\n\n\n\nOrganize Contacts\n\n\nBrowse the Web\n\n\nManage your Calendar\n\n\nCheck and sort your E-Mail\n\n\nCheck Youtube Videos and get + organize your favorites in a playlist\n\n\nManage your social media like Facebook, Twitter etc. (More information below.)\n\n\nUpdate GitHub repository's\n\n\nIntelligent Background Sentence Recognition - More Information below\n\n\nGet News\n\n\nKeep your computer secure\n\n\nKeep track of your activity\n\n\nOrganize Files\n\n\nOrganize Music\n\n\n\n\nAnd much more!\n\n\nPlus one of the biggest features: \nVoice Recognition\n\n\nWith the integrated voice recognition, Azurite can react and interpret your voice commands.\n\n\nIntelligent Background Sentence Recognition - IBSR\n\n\nIBSR is a basic feature which allows Azurite to listen to speech in the background and intelligently recognize sentences like: \n\n\n\n\nWe will meet at 10 a.m. at the park\n\n\n\n\nthen Azurite will ask you if you want to create a reminder.\n\n\nIf you choose so, you can add something like the name of the person you'll meet.\n\n\nAfter that, Azurite will automatically create a reminder at 10 a.m. to meet somebody\n\n\nWork in progress!\n\n\nAs you can see, all these beautiful features above wait to be implemented into Azurite.\n\n\nIf you want to you can contribute your idea or feature to the project and we'll implement it.\n\n\nRequest Feature / Contribute Idea - \nClick HERE\n\n\nProject layout:\n\n\nREADME.md                   # Readme file.\nLICENSE.txt                 # License File\nDOCS/                       # Just leave this as it is.\n    ...\ndependencies/               # Some files etc. for setup.\n    ...\ngrammar/                    # Grammar data for the voice recognition.\n    ...\nlogs/                       # Obviously log-files get stored here.\n    00-00-0000.log\nprotocols/                  # Protocols get stored here.\n    0000.py\nsettings/\n    backup_sys.xml          # First backup file for sys.xml.\n    person_database.xml     # Person database (holds information about people).\n    session_tmp.xml         # Get's used as Azurite runs.\n    setup_sequence.xml      # Tells setup.py what to do while installing.\n    sys.xml                 # Main configuration file.\nsystem/                     # Directory for all system files.\n    ...\ntmp/                        # TMP data.\n    ...\nvoice/                      # Additional stuff for voice recognition.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-project-azurite", 
            "text": "Here you can find information about the Azurite project!  Check out the GitHub repository  GitHub .", 
            "title": "Welcome to project Azurite"
        }, 
        {
            "location": "/#what-is-azurite", 
            "text": "Basically it it a personal assistant, which can help you perform different tasks and help you keep organized.  It can perform tasks like:   Organize Contacts  Browse the Web  Manage your Calendar  Check and sort your E-Mail  Check Youtube Videos and get + organize your favorites in a playlist  Manage your social media like Facebook, Twitter etc. (More information below.)  Update GitHub repository's  Intelligent Background Sentence Recognition - More Information below  Get News  Keep your computer secure  Keep track of your activity  Organize Files  Organize Music   And much more!  Plus one of the biggest features:  Voice Recognition  With the integrated voice recognition, Azurite can react and interpret your voice commands.  Intelligent Background Sentence Recognition - IBSR  IBSR is a basic feature which allows Azurite to listen to speech in the background and intelligently recognize sentences like:    We will meet at 10 a.m. at the park   then Azurite will ask you if you want to create a reminder.  If you choose so, you can add something like the name of the person you'll meet.  After that, Azurite will automatically create a reminder at 10 a.m. to meet somebody  Work in progress!  As you can see, all these beautiful features above wait to be implemented into Azurite.  If you want to you can contribute your idea or feature to the project and we'll implement it.  Request Feature / Contribute Idea -  Click HERE", 
            "title": "What is Azurite?"
        }, 
        {
            "location": "/#project-layout", 
            "text": "README.md                   # Readme file.\nLICENSE.txt                 # License File\nDOCS/                       # Just leave this as it is.\n    ...\ndependencies/               # Some files etc. for setup.\n    ...\ngrammar/                    # Grammar data for the voice recognition.\n    ...\nlogs/                       # Obviously log-files get stored here.\n    00-00-0000.log\nprotocols/                  # Protocols get stored here.\n    0000.py\nsettings/\n    backup_sys.xml          # First backup file for sys.xml.\n    person_database.xml     # Person database (holds information about people).\n    session_tmp.xml         # Get's used as Azurite runs.\n    setup_sequence.xml      # Tells setup.py what to do while installing.\n    sys.xml                 # Main configuration file.\nsystem/                     # Directory for all system files.\n    ...\ntmp/                        # TMP data.\n    ...\nvoice/                      # Additional stuff for voice recognition.", 
            "title": "Project layout:"
        }, 
        {
            "location": "/setup/", 
            "text": "Setup\n\n\nTo install / setup Reds_Py_Lib simply run the following commands inside a Terminal.\n\n\ngit clone https://github.com/Red-C0der/Reds_Py_Lib\n\n\ncd Reds_Py_Lib/\n\n\nsudo python setup.py install\n\n\nThat's it! You successfully installed Reds_Py_Lib! Use these commands to try it out:\n\n\npython\n\n\nimport reds_py_lib\n\n\nreds_py_lib.output.statePrint(\"info\", \"IT WORKS!!\")", 
            "title": "Setup"
        }, 
        {
            "location": "/setup/#setup", 
            "text": "To install / setup Reds_Py_Lib simply run the following commands inside a Terminal.  git clone https://github.com/Red-C0der/Reds_Py_Lib  cd Reds_Py_Lib/  sudo python setup.py install  That's it! You successfully installed Reds_Py_Lib! Use these commands to try it out:  python  import reds_py_lib  reds_py_lib.output.statePrint(\"info\", \"IT WORKS!!\")", 
            "title": "Setup"
        }, 
        {
            "location": "/file-system/", 
            "text": "File System\n\n\nReds_Python_Lib/\n\u2502   README.md                   - Contains project information.\n\u2502   setup.py                    - Python setup file.\n\u2502   Wiki_Notes                  - Just some notes, I take during coding.\n\u2502\n\u2514\u2500\u2500\u2500reds_py_lib/\n    \u2502   __init__.py             - Python __init__ file.\n    \u2502   logger.py               - Handles logging and log-files for my projects. \n    \u2502   output.py               - Handles custom outputs for my projects. (Colors etc.)", 
            "title": "File System"
        }, 
        {
            "location": "/file-system/#file-system", 
            "text": "Reds_Python_Lib/\n\u2502   README.md                   - Contains project information.\n\u2502   setup.py                    - Python setup file.\n\u2502   Wiki_Notes                  - Just some notes, I take during coding.\n\u2502\n\u2514\u2500\u2500\u2500reds_py_lib/\n    \u2502   __init__.py             - Python __init__ file.\n    \u2502   logger.py               - Handles logging and log-files for my projects. \n    \u2502   output.py               - Handles custom outputs for my projects. (Colors etc.)", 
            "title": "File System"
        }, 
        {
            "location": "/usage/", 
            "text": "Usage\n\n\nIn this section, I'll go over all the classes, functions, files, which you can use with my library!\n\n\nFile: output.py | Function: customPrint()\n\n\nThis Function can output a message containing formatting and colorcodes\n\n\noutput.customPrint(message_as_list_with_ccodes, debug=0)\n\n\nmessage_as_list_with_ccodes - Takes a list, which contains the message!\n\n    Example without formatting:\n        [\"This is\", \"cool\", \"stuff\", \"!\"]\n    Example with formatting:\n        [\"This will\", \"[%green%]be\", \"[%blue%]colored\", \"[$bold$]cause colored is cool!\"]\n\ndebug - Can be 0 or 1. Determinates whether to give back some debug information or not.\n\n    debug=0: Will not give back specially detailed debug information.\n    debug=1: Will give back specially detailed debug information.\n\n\n\nFile: output.py | Function: statePrint()\n\n\noutput.statePrint(state, message, debug=0)\n\n\nstate - Determinates what stands inside the first pair of brackets.\n\n    \"\"        - This stands for working! It will print [....].\n                Use this when you want to print out a working task!\n    \"ok\"      - Message after will be green!\n    \"error\"   - Message after will be red!\n    \"warning\" - Message after will be orange!\n    \"info\"    - Message after will be turquoise and bold!\n    \"debug\"   - Message after will be magenta!\n    \"sys\"     - Message after will be blue!\n\nmessage - The message, which you want to display after the brackets.\n\ndebug - Can be 0 or 1. Determinates whether to give back some debug information or not.\n\n    debug=0: Will not give back specially detailed debug information.\n    debug=1: Will give back specially detailed debug information.\n\n\n\nFile: logger.py | Function: write()\n\n\nThis function handles logging and also the corresponding log-files.\n\n\nlogger.write(level, message, lloc=\"\", LogFile=\"\")\n\n\nlevel - The logging level (what it writes in front of the logging message).\n    \"i\"     - INFO\n    \"w\"     - WARNING\n    \"e\"     - ERROR\n    \"c\"     - CRITICAL\n    \"ex\"    - EXCEPTION\n    \"d\"     - DEBUG\n\nmessage - The message, which it writes after the logging-level\n    For example: \"This is an informative message!\"\n\nlloc = Write this in here and replace it with correct data: \"File: Test.py | Class: Main | Function: test | Message: \"", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#usage", 
            "text": "In this section, I'll go over all the classes, functions, files, which you can use with my library!  File: output.py | Function: customPrint()  This Function can output a message containing formatting and colorcodes  output.customPrint(message_as_list_with_ccodes, debug=0)  message_as_list_with_ccodes - Takes a list, which contains the message!\n\n    Example without formatting:\n        [\"This is\", \"cool\", \"stuff\", \"!\"]\n    Example with formatting:\n        [\"This will\", \"[%green%]be\", \"[%blue%]colored\", \"[$bold$]cause colored is cool!\"]\n\ndebug - Can be 0 or 1. Determinates whether to give back some debug information or not.\n\n    debug=0: Will not give back specially detailed debug information.\n    debug=1: Will give back specially detailed debug information.  File: output.py | Function: statePrint()  output.statePrint(state, message, debug=0)  state - Determinates what stands inside the first pair of brackets.\n\n    \"\"        - This stands for working! It will print [....].\n                Use this when you want to print out a working task!\n    \"ok\"      - Message after will be green!\n    \"error\"   - Message after will be red!\n    \"warning\" - Message after will be orange!\n    \"info\"    - Message after will be turquoise and bold!\n    \"debug\"   - Message after will be magenta!\n    \"sys\"     - Message after will be blue!\n\nmessage - The message, which you want to display after the brackets.\n\ndebug - Can be 0 or 1. Determinates whether to give back some debug information or not.\n\n    debug=0: Will not give back specially detailed debug information.\n    debug=1: Will give back specially detailed debug information.  File: logger.py | Function: write()  This function handles logging and also the corresponding log-files.  logger.write(level, message, lloc=\"\", LogFile=\"\")  level - The logging level (what it writes in front of the logging message).\n    \"i\"     - INFO\n    \"w\"     - WARNING\n    \"e\"     - ERROR\n    \"c\"     - CRITICAL\n    \"ex\"    - EXCEPTION\n    \"d\"     - DEBUG\n\nmessage - The message, which it writes after the logging-level\n    For example: \"This is an informative message!\"\n\nlloc = Write this in here and replace it with correct data: \"File: Test.py | Class: Main | Function: test | Message: \"", 
            "title": "Usage"
        }, 
        {
            "location": "/azurite-script/", 
            "text": "", 
            "title": "Azurite Script"
        }, 
        {
            "location": "/api-implementation/", 
            "text": "Azurite API\n\n\nWith the Azurite API, it's possible to implement features from Azurite into your own script. If you wish to do that,\nplease follow the instructions below.\n\n\nImporting the API\n\n\nTODO: FINISH!", 
            "title": "API - Implementation"
        }, 
        {
            "location": "/api-implementation/#azurite-api", 
            "text": "With the Azurite API, it's possible to implement features from Azurite into your own script. If you wish to do that,\nplease follow the instructions below.", 
            "title": "Azurite API"
        }, 
        {
            "location": "/api-implementation/#importing-the-api", 
            "text": "TODO: FINISH!", 
            "title": "Importing the API"
        }, 
        {
            "location": "/contact/", 
            "text": "Contact\n\n\nIf you have any questions, just write me and I'll answer you.\n\n\n\n\n\n\n\n\nNickname\n\n\nName\n\n\nE-Mail\n\n\nGitHub\n\n\nTwitter\n\n\n\n\n\n\n\n\n\n\nRed_C0der\n\n\nMaximilian Vincent Heidenreich\n\n\nmaximilian.heidenreich@gmail.com / r3dc0d1ng@gmail.com\n\n\nRed-C0der\n\n\nRed_C0der", 
            "title": "Contact"
        }, 
        {
            "location": "/contact/#contact", 
            "text": "If you have any questions, just write me and I'll answer you.     Nickname  Name  E-Mail  GitHub  Twitter      Red_C0der  Maximilian Vincent Heidenreich  maximilian.heidenreich@gmail.com / r3dc0d1ng@gmail.com  Red-C0der  Red_C0der", 
            "title": "Contact"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\nMaximilian Vincent Heidenreich, hereby disclaims all copyright interest in the program\n\n\n\"Azurite\" (which is a personal assistant and API) written by Maximilian Vincent Heidenreich.\n\n\nMaximilian Vincent Heidenreich, 30 September 2015\n\n\nMaximilian Vincent Heidenreich, Creator of \"Azurite\"", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "Maximilian Vincent Heidenreich, hereby disclaims all copyright interest in the program  \"Azurite\" (which is a personal assistant and API) written by Maximilian Vincent Heidenreich.  Maximilian Vincent Heidenreich, 30 September 2015  Maximilian Vincent Heidenreich, Creator of \"Azurite\"", 
            "title": "License"
        }
    ]
}